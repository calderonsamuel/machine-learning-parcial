---
title: "machine-learning-parcial"
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(tidymodels)
```

## Read data

```{r}
suscripcion <- read_csv("data/train.csv") |> 
  mutate_if(is.character, as.factor)

validation <- read_csv("data/test_x.csv") |> 
  mutate_if(is.character, as.factor)
```

## Data splitting

```{r}
# We ignore this step for this new attempt

# # This enables the analysis to be reproducible when random numbers are used
# set.seed(42)
# # Put 3/4 of the data into the training set
# data_split <- initial_split(suscripcion, prop = 3/4)
# 
# # Create data frames for the two sets:
# train_data <- training(data_split)
# test_data  <- testing(data_split)

folds <- vfold_cv(suscripcion, strata = `Subscripcion Deposito`, v = 5, repeats = 100)
```

## Recipe

```{r}
my_recipe <- recipe(`Subscripcion Deposito` ~ ., data = suscripcion) |> 
  update_role(Id, Duracion, new_role = "ID") |> 
  step_dummy(all_nominal_predictors()) |> 
  step_normalize(all_numeric_predictors()) |> 
  step_zv(all_predictors())

my_recipe
```

## Model

```{r}
my_model <- boost_tree(trees = 15) |> 
  set_engine("xgboost") |> 
  set_mode("classification")
```

## Workflow

```{r}
my_workflow <- workflow() |> 
  add_model(my_model) |> 
  add_recipe(my_recipe)
```

## Fit

```{r}
# suscripcion_fit <- my_workflow |> 
#   fit(data = suscripcion)
```

```{r}
set.seed(42)
tictoc::tic()
suscripcion_fit_resampled <- my_workflow |> 
  fit_resamples(folds, control = control_resamples(save_workflow = TRUE)) |> 
  fit_best()
tictoc::toc()
```

```{r}
# suscripcion_fit |> 
#   extract_fit_parsnip() |> 
#   tidy()
```

```{r}
# suscripcion_fit |> 
#   augment(test_data) |> 
#   roc_curve(truth = `Subscripcion Deposito`, .pred_no) |> 
#   autoplot()
```

```{r}
# suscripcion_fit |> 
#   augment(test_data) |> 
#   roc_auc(truth = `Subscripcion Deposito`, .pred_no)
```

## Predictions

```{r}
resultados <- suscripcion_fit_resampled |> 
  augment(validation) |> 
  select(Id, `Subscripcion Deposito` = .pred_si)
```

## Save results

```{r}
last_result <- list.files("results", full.names = TRUE) |> 
  last() |> 
  read_csv()
```

```{r}
results_are_the_same <- tibble(
  current = resultados$`Subscripcion Deposito`,
  last = last_result$`Subscripcion Deposito`
) |> 
  mutate(across(everything(), ~ .x > 0.5)) |> 
  count(across(everything())) |> 
  summarise(equals = n() == 2) |> 
  pull(equals)
```

```{r}
if (!results_are_the_same) {
  resultados |> 
    write_csv(format(now(), "results/r-%Y-%m-%d-%H-%M-%S.csv"))
}
```
